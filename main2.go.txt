package main

import (
	"encoding/json"
	"fmt"

	"github.com/go-playground/validator/v10"
)

type Dog struct {
	Name  *string   `json:"name" validate:"required,gt=3"`
	Props *[]string `json:"props,omitempty" validate:"gt=0,lte=4"`
}

func main() {

	name := "dogggy"

	srcDog := Dog{
		Name:  &name,
		Props: &[]string{"as", "sd", "df", "fg"},
	}

	data, _ := json.Marshal(srcDog)

	fmt.Printf("%+v", string(data))
	fmt.Println()

	var destDog Dog

	json.Unmarshal(data, &destDog)

	fmt.Printf("%+v", destDog)
	fmt.Println()

	err := Validate(destDog)

	if err != nil {
		fmt.Println(err.Error())
		for _, er := range err.(validator.ValidationErrors) {
			fmt.Println("->> " + er.Field())
		}
	}
	fmt.Println()

	data2, _ := json.Marshal(destDog)
	fmt.Printf("%+v", string(data2))

}

func Validate(structObj interface{}) error {
	validate := validator.New()
	err := validate.Struct(structObj)
	return err
}
